# Template document for helix color schemes
# See also: https://docs.helix-editor.com/themes.html
#
# NOTE: Keys default to the most specific parent value.
#       e.g ui.cursor.primary > ui.cursor > ui



# GENERAL ==============================

warning    = { fg = "orange" }  # Editor warnings.
error      = { fg = "red" }     # Editor errors, like mis-typing a command.
info       = { fg = "blue" }    # Contextual info in diagnostic messages (LSP).
hint       = { fg = "magenta" } # Code diagnostics hints (LSP).
diagnostic = { }                # Code diagnostics in editing area (LSP).

"diagnostic.hint"        = { underline = { color = "magenta", style = "curl" } }
"diagnostic.info"        = { underline = { color = "blue",    style = "curl" } }
"diagnostic.warning"     = { underline = { color = "yellow",  style = "curl" } }
"diagnostic.error"       = { underline = { color = "red",     style = "curl" } }
"diagnostic.unnecessary" = { fg = "base06" }
"diagnostic.deprecated"  = { modifiers = ["crossed_out"] }

# UI ==============================
# For styling helix itself.

# 'ui.background'          = { bg = "base00" } # Default background color.
# 'ui.window'              = { bg = "base00"}  # Window border between splits.
# 'ui.gutter'              = { bg = "base00"}  # Left gutter for diagnostics and breakpoints.

'ui.text'                = { fg = "base07" } # Default text color.
'ui.text.focus'          = { fg = "base07" } # Selection highlight in buffer-picker7or file-picker.
'ui.text.info'           = { fg = "base07" } # Info popup contents 7space mode menu).

'ui.cursor'              = { fg = "base00", bg = "base06"}  # Fallback cursor colour, non-primary cursors when there are multiple (shift-c).
'ui.cursor.primary'      = { fg = "base00", bg = "base07" } # The primary cursor when there are multiple (shift-c).
'ui.cursor.insert'       = { fg = "base00", bg = "blue" }   # The cursor in insert mode (i).
'ui.cursor.select'       = { fg = "base00", bg = "yellow" } # The cursor in select mode (v).
'ui.cursor.match'        = { bg = "base03" } # The matching parentheses of that under the cursor.

'ui.selection'           = { fg = "base00", bg = "base05" } # All currently selected text.
'ui.selection.primary'   = { fg = "base00", bg = "base05" } # The primary selection when there are multiple.

'ui.linenr'              = { fg = "base03" } # Line numbers.
'ui.linenr.selected'     = { fg = "base06" } # Current line number.

'ui.virtual'             = { fg = "base04" } # Namespace for additions to the editing area.
'ui.virtual.ruler'       = { } # Vertical rulers (colored columns in editing area).
'ui.virtual.whitespace'  = { } # Whitespace markers in editing area.
'ui.virtual.jump-label'  = { fg = "magenta", modifiers = ["bold", "italic"] }

'ui.statusline'          = { fg = "base07", bg = "base01" } # Status line.
'ui.statusline.active'   = { } # Status line in focused windows.
'ui.statusline.inactive' = { } # Status line in unfocused windows.
"ui.statusline.normal"   = { } # Statusline mode during normal mode (only if editor.color-modes is enabled)
"ui.statusline.insert"   = { } # Statusline mode during insert mode (only if editor.color-modes is enabled)
"ui.statusline.select"   = { } # Statusline mode during select mode (only if editor.color-modes is enabled)

'ui.help'                = { fg = "base07", bg = "base01" } # `:command` descriptions above the command line.

'ui.highlight'           = { fg = "base07", bg = "base01" } # selected contents of symbol pickers (spc-s, spc-S) and current line in buffer picker (spc-b).

'ui.menu'                = { fg = "base07", bg = "base01" } # Autocomplete menu.
'ui.menu.selected'       = { fg = "base00", bg = "base07" } # Selected autocomplete item.

'ui.popup'               = { fg = "base07", bg = "base02" } # Documentation popups (space-k).
'ui.popup.info'          = { fg = "base07", bg = "base01" } # Info popups box (space mode menu).


# SYNTAX HIGHLIGHTING ==============================
# All the keys here are Treesitter scopes.

'property'                     = { } # Regex group names.
'special'                      = { modifiers = [ "bold", "italic" ] } # Special symbols e.g `?` in Rust, `...` in Hare.
'attribute'                    = { } # Class attributes, html tag attributes.

'type'                         = { fg = "base06", modifiers = ["italic"] } # Variable type, like integer or string, including program defined classes, structs etc..
'type.builtin'                 = { } # Primitive types of the language (string, int, float).
# 'type.enum.variant'            = { } # A variant of an enum.

'constructor'                  = { } # Constructor method for a class or struct.

'constant'                     = { } # Constant value
'constant.builtin'             = { } # Special constants like `true`, `false`, `none`, etc.
'constant.builtin.boolean'     = { } # True or False.
'constant.character'           = { } # Constant of character type.
'constant.character.escape'    = { } # escape codes like \n.
'constant.numeric'             = { } # constant integer or float value.
'constant.numeric.integer'     = { } # constant integer value.
'constant.numeric.float'       = { } # constant float value.

'string'                       = { } # String literal.
'string.regexp'                = { } # Regular expression literal.
'string.special'               = { } # Strings containing a path, URL, etc.
'string.special.path'          = { } # String containing a file path.
'string.special.url'           = { } # String containing a web URL.
'string.special.symbol'        = { } # Erlang/Elixir atoms, Ruby symbols, Clojure keywords.

'comment'                      = { fg = "base05", modifiers = ["italic"] } # This is a comment.
'comment.line'                 = { } # Line comments, like this.
'comment.block'                = { } # Block comments, like /* this */ in some languages.
'comment.block.documentation'  = { } # Doc comments, e.g '///' in rust.

'variable'                     = { modifiers = ["bold"] } # Variable names.
'variable.builtin'             = { fg = "base06" } # Language reserved variables: `this`, `self`, `super`, etc.
'variable.parameter'           = { } # Function parameters.
'variable.other.member'        = { } # Fields of composite data types (e.g. structs, unions).

'label'                        = { } # Loop labels, among other things.

'punctuation'                  = { } # Any punctuation symbol.
'punctuation.delimiter'        = { } # Commas, colons or other delimiter depending on the language.
'punctuation.bracket'          = { } # Parentheses, angle brackets, etc.

'keyword'                      = { fg = "base06", modifiers = ["italic"] } # Language reserved keywords.
# 'keyword.control'              = { } # Control keywords.
# 'keyword.control.conditional'  = { } # `if`, `else`, `elif`.
# 'keyword.control.repeat'       = { } # `for`, `while`, `loop`.
# 'keyword.control.import'       = { } # `import`, `export` `use`.
'keyword.control.return'       = { modifiers = ["bold"] } # `return` in most languages.
# 'keyword.control.exception'    = { } # `try`, `catch`, `raise`/`throw` and related.
# 'keyword.operator'             = { } # `or`, `and`, `in`.
# 'keyword.directive'            = { } # Preprocessor directives (#if in C...).
# 'keyword.function'             = { } # The keyword to define a function: 'def', 'fun', 'fn'.

'operator'                     = { fg = "base06" } # Logical, mathematical, and other operators.

'function'                     = { modifiers = ["bold"] }
# 'function.builtin'             = { }
# 'function.method'              = { } # Class / Struct methods.
# 'function.macro'               = { }
# 'function.special'             = { } # Preprocessor function in C.

'tag'                          = { } # As in <body> for html, css tags.
'tag.error'                    = { } # Erroneous closing html tags.

'namespace'                    = { } # Namespace or module identifier.


# Markup ==============================
# Colors for markup languages, like Markdown or XML.

'markup.heading'               = { modifiers = ["bold"] }
# 'markup.heading.1'             = { } # Markdown heading 1 color.
# 'markup.heading.2'             = { } # Markdown heading 2 color.
# 'markup.heading.3'             = { } # Markdown heading 3 color.
# 'markup.heading.4'             = { } # Markdown heading 4 color.
# 'markup.heading.5'             = { } # Markdown heading 5 color.
# 'markup.heading.6'             = { } # Markdown heading 6 color.
# 'markup.heading.marker'        = { } # Hashtag color on Markdown headings.

'markup.list'                  = { }
'markup.list.numbered'         = { } # Numbered list.
'markup.list.unnumbered'       = { } # Bullet point list.

'markup.bold'                  = { modifiers = ["bold"] }   # Bold text.
'markup.italic'                = { modifiers = ["italic"] } # Italicised text.

'markup.link'                  = { }
'markup.link.url'              = { fg = "blue", underline = { color = "blue", style = "line" } } # Urls pointed to by links.
'markup.link.label'            = { fg = "green" }  # Non-URL link references.
'markup.link.text'             = { fg = "blue" }   # URL and image descriptions in links.

'markup.quote'                 = { fg = "base05" } # `> Quotes` in Markdown.


# Markup - Interface ==============================
# "These scopes are used for theming the editor interface."

'markup.normal'                = { }
'markup.normal.completion'     = { } # For completion doc popup ui.
'markup.normal.raw'            = { } # For hover popup ui.

'markup.heading.completion'    = { } # Headings for completion doc popup ui.
'markup.heading.raw'           = { } # Headings for hover popup ui.

'markup.raw'                   = { bg = "base02" } # Code block in Markdown.
# 'markup.raw.block'             = { } # Multiline (```) codeblock in Markdown.
# 'markup.raw.inline'            = { } # `Inline code block` in Markdown.
# 'markup.raw.inline.completion' = { } # ?
# 'markup.raw.inline.hover'      = { } # ?

# Diff ==============================
# Version control changes.

'diff.plus'        = { fg = "green" }  # Additions.
'diff.minus'       = { fg = "red" }    # Deletions.
'diff.delta'       = { fg = "yellow" } # Modifications.
'diff.delta.moved' = { fg = "blue" }   # Renamed or moved files.

[palette] # Define your custom colors here.
# base00 = "#eeeeee"
# base01 = "#dddddd"
# base02 = "#cccccc"
# base03 = "#aaaaaa"
# base04 = "#989898"
# base05 = "#787878"
# base06 = "#585858"
# base07 = "#181818"
base00 = "#f5f5f5"  
base01 = "#e8e8e8"  
base02 = "#dbdbdb"  
base03 = "#c0c0c0"  
base04 = "#a0a0a0"  
base05 = "#7a7a7a"  
base06 = "#4a4a4a"  
base07 = "#1a1a1a"  


# base16-tomorrow
# black = '#f8f8f8'
# red = '#c82829'
# green = '#718c00'
# yellow = '#eab700'
# blue = '#4271ae'
# magenta = '#8959a8'
# cyan = '#3e999f'
# orange = "#f5871f"
# white = '#383838'

# flexoki-light
# black = "#100F0F"
red = "#D14D41"
green = "#879A39"
yellow = "#D0A215"
blue = "#4385BE"
magenta = "#CE5D97"
cyan = "#3AA99F"
# white = "#FFFCF0"
orange = "#BC5215"
